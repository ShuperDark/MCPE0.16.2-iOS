////////////////////////////////////////
//List of functions in the iOS version//
// of Minecraft Pocket Edition v0.16.2//
//		Created by DarkShuper //
////////////////////////////////////////

0x100108428(0x8505e4)
GuiData::addMessage

0x10010881c(0x850d7c)
GuiData::displayChatMessage

0x100108794(0x850c80)
GuiData::displayClientMessage

0x100108fa4(0x851a18)
GuiData::showTipMessage

0x100108988(0x851038)
GuiData::displayWhisperMessage

0x100109b40(0x8523a0)
GuiData::postError

0x10049816c(0xcdaf94)
I18n::get std::string const&

0x1004980e0(0xcdaea4)
I18n::get std::string const&, std::vector<std::string, std::allocator<std::string> > const&

0x1008528fc(0x10d32a0)
Dimmension::getTimeOfDay

0x1007a5de4(0x10d995c)
Level::isDayCycleActive

0x1008e2eec(0x117d26a)
LevelData::getStopTime

0x1007a6db0(0x10da826)
Level::getTime

0x1007a6d38(0x10da7ca)
Level::setTime//Maybe not

0x1007a74d4(0x10db032)
Level::getLevelData

0x1008e2eec(0x117d26a)
LevelData::getStopTime

0x1008e2f0c(0x117d286)
Level::clearLoadedPlayerTag

0x100757b60(0x102ee48)
ItemInstance::getAuxValue

0x100757b68(0x102ee4e)
ItemInstance::operator=

0x1007579f0(0x102ed28)
ItemInstance::useAsFuel

0x100658034(0xf22dd4)
Entity::getRegion

0x100107fc4(0x850104)
GuiData::tick

0x1000855a8(0x7b6ae2)
MinecraftClient::getFont

0x10007ba50(0x7a942c)
MinecraftClient::onResourcesLoaded

0x1000832b8(0x7b43d0)
MinecraftClient::onPlayerLoaded

0x1007aa610(0x10ddd86)
Level::isClientSide

0x100722000(0xfae9dc)
SurvivalMode::tick

0x10072192c(0xfae68a)
GameMode::tick

0x100774f40(0xfd1390)
Recipes::init

0x10012eb58(0x102df0c)
ItemInstance::ItemInstance()

0x100756c6c(0x102e500)
ItemInstance::ItemInstance(int, int, int)

0x100756d24(0x102e5a0)
ItemInstance::ItemInstance(int, int, int, CompoundTag const*)

0x100756e7c(0x102e684)
ItemInstance::ItemInstance(ItemInstance const&)

0x1007569a4(0x102e2e4)
ItemInstance::ItemInstance(Item const*, int);

0x100756b14(0x102e420)
ItemInstance::ItemInstance(Item const*, int, int, CompoundTag const*)

0x10075684c(0x102e1bc)
ItemInstance::ItemInstance(Block const*, int, int);

0x1007567b0(0x102e13c)
ItemInstance::ItemInstance(Block const*, int);

0x100781794(0xfe5604)
Recipes::addShapedRecipe(ItemInstance const&, std::string const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x100781ca0(0xfe5b80)
Recipes::addShapedRecipe(ItemInstance const&, std::string const&, std::string const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x100781d74(0xfe5ca8)
Recipes::addShapedRecipe(ItemInstance const&, std::string const&, std::string const&, std::string const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x10078308c(0xfe7a54)
Recipes::addShapedRecipe(ItemInstance const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x100782a74(0xfe73c0)
Recipes::addShapedRecipe(std::vector<ItemInstance, std::allocator<ItemInstance> > const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x1007818a0(0xfe5784)
Recipes::addShapelessRecipe(ItemInstance const&, std::vector<Recipes::Type, std::allocator<Recipes::Type> > const&);

0x1007717d8(0xfce0d6)
FurnaceRecipes::getResult

0x1007168f8(0xf9fb7c)
PlayerInventoryProxy::getSelectedItem

0x100713a28
Player::canUseCarriedItemWhileMoving

0x1007138f0(0xf9cfac)
Player::isHiddenFrom

0x100713ab8(0xf9d0dc)
Player::_addLevels

0x100713c94(0xf9d280)
Player::sendInventory

0x1007144c8(0xf9d868)
Player::tickWorld

0x1007125e4(0xf9c088)
Player::attack

0x1007120e0(0xf9bcb0)
Player::hurt

0x100713a0c(0xf9d06a)
Player::hasResource//Maybe not

0x10035c584(0xb02410)
LocalPlayer::playSynchronizedSound

0x10065965c(0xf24418)
Entity::playSound

0x10035caac(0xb026dc)
EntityEventPacket::read

0x10070ec64(0xf97014)
Player::normalTick

0x10065b088(0xf25d60)
Entity::tick

0x10035eba4(0xb03446)
Player::displayLocalizebleMessage

0x10035eba8(0xb03448)
Player::displayWhisperMessage

0x100746be0(0x10219a0)
Item::useOn

0x100746b5c(0x1021958)
Item::use

0x100746b04(0x102191e)
Item::setIcon(TextureUVCoordinateSet const&)
0x100746b0c(0x1021924)
Item::setIcon(std::string const&, int)

0x100746a88(0x10218cc)
Item::setMaxStackSize

0x1007a6db8(0x10da82c)
Level::_backgroundTickSeasons

0x10070f5cc(0xf979bc)
Player::getInventory

0x100656278(0xf2137a)
Entity::getLevel
0x100657df8(0xf22c4e)
Entity::getLevel() const

0x10070dfe0(0xf96594)
Player::prepareRegion

0x1006a5e04(0xf7ff50)
Mob::spawnEatParticle

0x1006a6110(0xf801f4)
Mob::setSpeed

0x1012ae238(0x1c7fde0)
Item::mItems

0x10074689c(0x1021650)
Item::Item(std::string const&, short)

0x1007281e0(0xfc35c8)
BlockItem::BlockItem(std::string const&, int)

0x10074242c(0x1016870)
Item::initClientData

0x1007421e0(0x1016368)
Item::initServerData

0x100734d00(0x100a0a4)
Item::initCreativeItems

0x100745f6c(0x101ef28)
Item::addBlockItems

0x100746dd0(0x1021ace)
Item::setCategory

0x100726a44(0xfc1e30)
Item::setIsGlint

0x100745f10(0x101ee00)
Item::addCreativeItem(ItemInstance const&)  //Maybe there is no addCreativeItem whose argument is not "ItemInstance const&".

0x100746ed0(0x1021b60)
Item::buildDescriptionName

0x100747974(0x10228a0)
Item::setStackedByData

0x10074797c(0x10228a6)
Item::setMaxDamage

0x100747984(0x10228ac)
Item::getTextureUVCoordinateSet

0x100759748(0x10309d8)
ItemInstance::getIcon

0x1007d7dc8(0x1069180)
Block::Block(std::string const&, int, Material const&)

0x1012d1860(0x1c82f78)
Block::mBlocks

0x1007d8980(0x1069e44)
Block::clip(BlockSource&, BlockPos const&, Vec3 const&, Vec3 const&, bool, int)
0x1007d824c(0x106968c)
Block::clip(BlockSource&, BlockPos const&, Vec3 const&, Vec3 const&, bool, int, AABB const&)

0x1007d8a20(0x1069e90)
Block::spawnResources

0x1007d8118(0x1069584)
Block::getMaterial

0x1007d81d0(0x1069630)
Block::getDestroyProgress

0x1007d8184(0x10695fc)
Block::init

0x1007d451c(0x10569a0)
Block::initBlocks

0x1007d94c8(0x106a66c)
Block::playerDestroy

0x1007d8c98(0x106a080)
Block::popResource

0x1007d961c(0x106a73c)
Block::getSilkTouchItemInstance

0x1007d9678(0x106a76c)
Block::buildDescriptionName

0x1007d9738(0x106a8ca)
Block::setDestroyTime

0x1007d9728(0x106a8b8)
Block::setExplodeable

0x1007d987c(0x106a998)
Block::tryToPlace

0x1007d991c(0x106a9ee)
Block::checkIsPathable

0x1007d9944(0x106aa02)
Block::onRemove

0x1007d9998(0x106aa30)
Block::onFallOn

0x1007d9a1c(0x106aa82)
Block::getTypeToSpawn

0x1007d9b6c(0x106ab08)
Block::getMobToSpawn(BlockSource&, BlockPos const&) const
0x1007d9bc0(0x106ab3c)
Block::getMobToSpawn(BlockSource&, BlockPos const&, std::map<EntityType, int, std::less<EntityType>, std::allocator<std::pair<EntityType const, int> > >, bool&) const

0x1007d9d20(0x106abfa)
Block::isSolidBlockingBlock

0x1007d9d84(0x106ac30)
Block::isWaterBlocking

0x1007d9e58(0x106acc4)
Block::getVisualShape(BlockSource&, BlockPos const&, AABB&, bool)

0x1007d9eb0(0x106acec)
Block::getCollisionShape

0x1007d9fcc(0x106add0)
Block::lookupByName

0x1007da280(0x106b11c)
Block::getDebugText

0x1008c6e50(0x1150d60)
Material::getTranslucency

0x1008c6e74(0x1150d78)
Material::getMaterial

0x1008c6e28(0x1150d48)
Material::getBlocksMotion

0x1008c6e08(0x1150d34)
Material::isSolidBlocking

0x1008c6de8(0x1150d20)
Material::isType

0x1008c6e40(0x1150d58)
Material::isReplaceable

0x1008c6e48(0x1150d5c)
Material::isLiquid

0x1008c6e28(0x1150d48)
Material::getBlocksMotion

0x1007994a0(0x10c1b46)
BlockSource::getLevel()

0x1007a9d24(0x10dd5b0)
Level::getRandom() const

0x1000ec430(0x7f6af4)
Random::genrand_int32

0x1008ebd48(0x1187f20)
AABB::AABB()
0x1008ebc88(0x1187fd4)
AABB::AABB(Vec3 const&, Vec3 const&)

0x1008ec200(0x1188528)
AABB::translated

0x1008edaa8(0x118a59c)
AABB::isEmpty

0x1008ee0a8(0x118ade0)
Vec3::Vec3(BlockPos const&)

0x100710cb4(0xf98e90)
Player::getDestroySpeed

0x100710e04(0xf98ff4)
Player::canDestroy

0x10070f5c4(0xf979b4)
Player::getSelectedItem

0x10070f8b8(0xf97c1c)
Player::causeFoodExhaustion

0x10070f5d4(0xf979c2)
Player::useItem

0x100713770(0xf9ce70)
Player::respawn

0x10079971c(0x10c1cd0)
BlockSource::getBlock

0x10079a014(0x10c2358)
BlockSource::getBlockID

0x10079affc(0x10c2dec)
BlockSource::mayPlace

0x10079c3d8(0x10c3b90)
BlockSource::getEntities

0x10079bb6c(0x10c3644)
BlockSource::setBlockAndData(BlockPos const&, BlockID, unsigned char, int)
0x10079b854(0x10c33f8)
BlockSource::setBlockAndData(BlockPos const&, FullBlock, int, std::unique_ptr<BlockEntity, std::default_delete<BlockEntity> >)

0x10079975c(0x10c1d04)
BlockSource::getDimension()

0x10079d25c(0x10c2f74)
BlockSource::getMobsAt

0x10079f2cc(0x10c6654)
BlockSource::getBiome

0x10079f1f4(0x10c65de)
BlockSource::tryGetBiome

0x10079a858(0x10c2868)
BlockSource::getBrightness

0x10079a898(0x10c288c)
BlockSource::getRawBrightness

0x10079a0fc(0x10c23f0)
BlockSource::getData(BlockPos const&)
0x10079ddd0(0x10c563c)
BlockSource::getData(int, int, int)

0x1007994b0(0x10c1b4e)
BlockSource::checkBlockPermissions

0x100799564(0x10c1bd0)
BlockSource::_getBlockPermissions

0x100799660(0x10c1c6c)
BlockSource::hasBorderBlock

0x10079ecb8(0x10c620c)
BlockSource::canProvideSupport

0x1007aa608(0x10ddd82)
Level::getPlayers

0x1007aa8c0(0x10ddf56)
Level::getGameRules

0x1007aa8a8(0x10dd5f0)
Level::getAdventureSettings

0x1007a9334(0x10dc954)
Level::denyEffect

0x10065b818(0xf26266)
Entity::isRemoved

0x1008dded4(0x1175aac)
GameRules::getBool

0x1003845e0(0xb60c90)
BlockGraphics::initBlocks

0x100388338(0xb6c0d8)
BlockGraphics::BlockGraphics(std::string const&)

0x1003829c8(0xb5e480)
BlockGraphics::setTextureItem(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&)

0x100382f0c(0xb5ee58)
BlockGraphics::setCarriedTextureItem(std::string const&, std::string const&, std::string const&)

0x10038365c(0xb5fc60)
BlockGraphics::setBlockShape(BlockGraphics&, Json::Value const&)

0x100384358(0xb60954)
BlockGraphics::setSoundType(BlockGraphics&, Json::Value const&)

0x100388ea0(0xb6cdf2)
BlockGraphics::getTexture(signed char)

0x10126a100(0x1c1cf28)
BlockGraphics::mBlocks

0x10004db54(0x163634e)
Json::Value::isNull

0x10004d538(0x1635e58)
Json::Value::asString

0x100381ca8(0xb5c388)
BlockSoundTypeFromString(std::string const&)//normal, gravel, wood, grass, metal, stone, cloth, glass, sand, snow, ladder, anvil, slime, silent, default

0x100798fc0(0x10c1888)
BlockPos::relative

0x10065be28(0xf26840)
Entity::getRotation

0x100757c50(0x102eecc)
ItemInstance::getEnchantsFromUserData

0x10075719c(0x102e884)
ItemInstance::getNetworkUserData

0x100757048(0x102e7b8)
ItemInstance::getStrippedNetworkItem

0x10075700c(0x102e790)
ItemInstance::getId

0x100758ca8(0x102fc40)
ItemInstance::save

0x100758ba8(0x102fb8c)
ItemInstance::cloneSafe

0x100758b0c(0x102fb40)
ItemInstance::clone

0x1007587dc(0x102f7dc)
ItemInstance::getIdAuxEnchanted

0x1007586a4(0x102f650)
ItemInstance::getCustomName
 
0x100758638(0x102f604)
ItemInstance::hasCustomHoverName

0x1007585b4(0x102f59c)
ItemInstance::getName

0x100757738(0x102ebbc)
ItemInstance::hasUserData

0x100757890(0x102ec64)
ItemInstance::getUserData

0x100758530(0x102f54a)
ItemInstance::sameItemAndAux

0x10049aeec(0xcde19e)
CompoundTag::contains(std::string const&, Tag::Type) const
0x10049aebc(0xcde112)
CompoundTag::contains(std::string const&) const

0x10049b3d8(0xcde894)
CompoundTag::getList

0x10049bc28(0xcdf076)
CompoundTag::rawView

0x10049b8a0(0xcdee60)
CompoundTag::clone

0x10049b1f8(0xcde5ac)
CompoundTag::getString

0x100794860(0xffa84c)
ItemEnchants::ItemEnchants(int)

0x100794ed0(0xfface4)
ItemEnchants::addEnchants

0x100794e08(0xffac68)
ItemEnchants::addEnchant

0x100794c68(0xffab3c)
ItemEnchants::canEnchant

0x100794fa8(0xffad3e)
ItemEnchants::getAllEnchants

0x1007953c4(0xffb03a)
ItemEnchants::isEmpty

0x100795724(0xffb298)
ItemEnchants::_toList

0x10079571c(0xffb292)
ItemEnchants::getSlot

0x1007956a0(0xffb258)
ItemEnchants::hasEnchant

0x100757cf4(0x102ef44)
ItemInstance::saveEnchantsToUserData

0x100757c20(0x102eea8)
ItemInstance::isEnchanted

0x100794770(0xff8762)
EnchantmentInstance::EnchantmentInstance(int, int)

0x100794778(0xff8768)
EnchantmentInstance::getEnchantType

0x100794780(0xff8770)
EnchantmentInstance::getEnchantLevel

0x100794780(0xff876c)
EnchantmentInstance::setEnchantType

0x100794788(0xff8774)
EnchantmentInstance::setEnchantLevel

0x100791a7c(0xff9414)
EnchantUtils::determineActivation

0x100790de4(0xff8ce4)
EnchantUtils::applyEnchant(ItemInstance&, ItemEnchants const&)
0x100790ba8(0xff8bec)
EnchantUtils::applyEnchant(ItemInstance&, int, int)
0x100791360(0xff905c)
EnchantUtils::applyEnchant(ItemInstance&, EnchantmentInstance const&)

0x100790be0(0xff8c08)
EnchantUtils::randomlyEnchant(ItemInstance&, int, int)

0x100790fe8(0xff8db8)
EnchantUtils::selectEnchantments(Item*, int, int)

0x10079184c(0xff92f4)
EnchantUtils::getAvailableEnchantmentResults

0x100790a68(0xff8a50)
EnchantUtils::getLegalEnchants

0x100790678(0xff88ae)
EnchantUtils::hasEnchant

0x100790804(0xff892a)
EnchantUtils::getRandomItemWith

0x1007903f4(0xff87da)
EnchantUtils::getEnchantLevel

0x1007902f8(0xff8778)
EnchantUtils::getBestEnchantLevel

0x10078de6c(0xff56b8)
Enchant::canEnchant(int) const

0x10078de40(0xff5664)
Enchant::isCompatibleWith

0x10049a40c(0xcdd4dc)
CompoundTag::CompoundTag()

0x10049aa24(0xcddd3a)
CompoundTag::putShort

0x10049a9a0(0xcddcf6)
CompoundTag::putByte

0x10049a928(0xcddcbe)
CompoundTag::put

0x10049ad84(0xcde00c)
CompoundTag::putCompound

0x10049b344(0xcde800)
CompoundTag::getCompound

0x10049ee8c(0xce2028)
Tag::Tag(std::string const&)

0x10049d6ec(0xce0908)
ListTag::ListTag()

0x10049d76c(0xce0a0c)
ListTag::ListTag(std::string const&)

0x10049dd20(0xce1108)
ListTag::add(std::unique_ptr<Tag, std::default_delete<Tag> >)

0x10049a254(0xcdd370)
ByteTag::ByteTag(std::string const&, unsigned char)

0x10049e5d8(0xce1854)
ShortTag::ShortTag(std::string const&, short)

0x100659d40(0xf24aa8)
Entity::setPos(EntityPos const&)
0x100659fc8(0xf24d10)
Entity::setPos(Vec3 const&)

0x10065a064(0xf24da0)
Entity::getPos

0x10065a06c(0xf24da4)
Entity::getPosOld

0x10065a074(0xf24da8)
Entity::getPosExtrapolated

0x10065a108(0xf24e2a)
Entity::getVelocity

0x10065a110(0xf24e2e)
Entity::setPreviousPosRot

0x10065a148(0xf24e5e)
Entity::getRadius()

0x10065a160(0xf24e78)
Entity::isSkyLit

0x10065a1d4(0xf24ed0)
Entity::getCenter

0x10065a288(0xf24fa8)
Entity::getBrightness

0x10065a330(0xf25044)
Entity::getViewVector

0x10065a428(0xf25184)
Entity::getViewVector2

0x10065a3d0(0xf25110)
Entity::getInterpolatedRotation

0x100659c40(0xf249e0)
Entity::_updateOwnerChunk

0x100659abc(0xf24888)
Entity::isUnderLiquid

0x1006591a8(0xf23eb0)
Entity::_getBlockOnPos

0x100659448(0xf24230)
Entity::_playMovementSound

0x1006590b4(0xf23bf8)
Entity::testForEntityStacking

0x1006581d4(0xf22f18)
Entity::move

0x100658170(0xf22ed8)
Entity::isFree(Vec3 const&)
0x1006580ec(0xf22e84)
Entity::isFree(Vec3 const&, float)

0x100658048(0xf22de4)
Entity::isInLava

0x100657fa0(0xf22d76)
Entity::isInWaterOrRain

0x100657f3c(0xf22d38)
Entity::isInWall

0x100657ea4(0xf22cd0)
Entity::setSitting

0x100657e74(0xf22cb4)
Entity::isSitting

0x100657e0c(0xf22c66)
Entity::setOwner

0x100657bd4(0xf228d8)
Entity::initParams

0x100657960(0xf22492)
Entity::getUniqueID

0x10066049c(0xf2ce5c)
Entity::getOwnerEntityType

0x1006604f0(0xf2ce90)
Entity::_playStepSound

0x1006606a4(0xf2cfb0)
Entity::onSynchedDataUpdate

0x1006576a4(0xf22272)
Entity::hasCategory

0x100660870(0xf2d0b0)
Entity::isInsideBorderBlock

0x100660a4c(0xf2d2c0)
Entity::checkBlockCollisions

0x100660d44(0xf2d4e0)
Entity::setLeashHolder

0x100660e54(0xf2d5ac)
Entity::dropLeash

0x100661018(0xf2d6fc)
Entity::canBeLeashed

0x100661068(0xf2d728)
Entity::getAirSupply

0x100661084(0xf2d734)
Entity::getTotalAirSupply

0x1006579cc(0xf22510)
Entity::getTarget

0x1006579f4(0xf22548)
Entity::setTarget

0x10065768c(0xf2225c)
Entity::removeDefinitionGroup

0x100657684(0xf22254)
Entity::addDefinitionGroup

0x100661530(0xf2db30)
Entity::isGlobal

0x10065b64c(0xf261a8)
Entity::removeAllRiders

0x10065e800(0xf29990)
Entity::isRide

0x100657958(0xf22484)
Entity::getRuntimeID

0x1007a13ac(0x10d2458)
ChunkPos::ChunkPos(BlockPos const&)
0x1007a13c8(0x10d2466)
ChunkPos::ChunkPos(Vec3 const&)

0x100798f08(0xf249e0)
BlockPos::BlockPos(Vec3 const&)
0x100798f40(0x10c17fe)
BlockPos::BlockPos(ChunkPos const&, int)
0x100798f28(0x10c17ae)
BlockPos::BlockPos(float, float, float)

0x100799804(0x10c1df6)
BlockSource::getChunk(ChunkPos const&)

0x10084cac0(0x10d00a8)
LevelChunk::getPosition

0x10084c7b8(0x10cfe7e)
LevelChunk::getState

0x100847b40(0x10cc6f4)
LevelChunk::removeEntity

0x100847a9c(0x10cc686)
LevelChunk::addEntity

0x10084cac8(0x10d00ac)
LevelChunk::isReadOnly

0x100847ce0(0x10cc898)
LevelChunk::isSkyLit

0x10084c644(0x10cfd94)
LevelChunk::getTopRainBlockPos

0x10084c208(0x10cf92e)
LevelChunk::getBiome

0x1008478d4(0x10cc51c)
LevelChunk::getSkyLight

0x100847a8c(0x10cc67c)
LevelChunk::getBlockLight

0x10084410c(0x10c9758)
ChunkSource::ChunkSource(Level*, Dimension*, int)

0x100843d60(0x10c9018)
ChunkSource::getGeneratedChunk

0x10084438c(0x10c98ce)
ChunkSource::getAvailableChunk

0x10084415c(0x10c97b4)
ChunkSource::getChunkSide

0x100847a44(0x10cc648)
LevelChunk::hasEntity

0x1008ed2e8(0x1189c46)
AABB::contains

0x1008ec350(0x11886c4)
AABB::grow

0x1008ec9a4(0x1188f26)
AABB::intersects

0x1008ec2a0(0x11885e0)
AABB::merge

0x1008ed0cc(0x11899a4)
AABB::move(Vec3 const&)

0x1008ed1d8(0x1189ac0)
AABB::getBounds

0x1008ec3f0(0x118879c)
AABB::cloneMove

0x1008ec040(0x1188368)
AABB::expanded

0x1008ec490(0x1188854)
AABB::clipCollide

0x1008edc18(0x118aa84)
AABB::flooredCeiledCopy

0x10079da30(0x10c51b8)
BlockSource::getMaterial

0x10079d364(0x10c4b64)
BlockSource::fetchCollisionShapes

0x10079cf00(0x10c45b4)
BlockSource::addUnloadedChunksAABBs

0x10079cc6c(0x10c43d4)
BlockSource::fetchAABBs

0x100665aa8(0x10c47d4)
BlockSource::addVoidFloor

0x100799964(0x10c1f04)
BlockSource::hasBlock

0x10079d734(0x10c4ea8)
BlockSource::containsAnyLiquid

0x10079da70(0x10c51ec)
BlockSource::containsMaterial

0x10079975c(0x10c1d04)
BlockSource::getDimension()

0x10079aca0(0x10c2b8a)
BlockSource::canSeeSky

0x10079f6c8(0x10c6900)
BlockSource::getTopRainBlockPos

0x10079f2cc(0x10c6654)
BlockSource::getBiome

0x10079f1f4(0x10c65de)
BlockSource::tryGetBiome

0x10079faac(0x10c6d2c)
BlockSource::isSnowTemperature

0x10079ed20(0x10c6250)
BlockSource::isInWall

0x100799bc4(0x10c2068)
BlockSource::hasChunksAt
0x100799d74(0x10c219a)
BlockSource::hasChunksAt(int, int, int, int)

0x100810374(0x10a7d8c)
LiquidBlock::getHeightFromData

0x1007a76f0(0x10db150)
Level::playSound

0x1007a79e8(0x10db338)
Level::getLocalPlayer

0x1007aae38(0x10de3ee)
Level::getNewUniqueID

0x1007a8920(0x10dbfc0)
Level::fetchEntity

0x1007aa628(0x10ddd9e)
Level::getPlayerList

0x1007a9aa4(0x10dd312)
Level::getPlayer(mce::UUID const&)

0x1007aa63c(0x10dddac)
Level::getPacketSender

0x1007a9a34(0x10dd086)
Level::broadcastBossEvent

0x1007a98cc(0x10dcee4)
Level::broadcastEntityEvent

0x1007a780c(0x10db208)
Level::broadcastSoundEvent

0x1007a9790(0x10dcd90)
Level::animateTick

0x1007a55a8(0x10d91c8)
Level::_saveMapData

0x1007a96fc(0x10dcd40)
Level::setCommandsEnabled

0x1007a9684(0x10dccfc)
Level::setXBLBroadcast

0x1007a94bc(0x10dca48)
Level::extinguishFire

0x1007a9414(0x10dc9e4)
Level::potionSplash

0x1007a9118(0x10dc774)
Level::explode

0x1007a8fe8(0x10dc678)
Level::setDayCycleActive

0x1007a8ba8(0x10dc19c)
Level::removeEntityReferences

0x1007a8a38(0x10dc07c)
Level::getRuntimeEntity

0x1007a8978(0x10dbff6)
Level::takeEntity

0x1008ed2bc(0x1189bf8)
AABB::getCenter

0x1007d8150(0x10695ac)
Block::isType

0x1007d8fdc(0x106a31c)
Block::isSolid

0x100852ae4(0x10d3530)
Dimension::getWeather

0x100854778(0x10d4f88)
Dimension::sendPacketForPosition

0x1007bdac8(0x11852bc)
Weather::isRainingAt

0x1007a1330(0x10d2424)
ChunkBlockPos::ChunkBlockPos(BlockPos const&)

0x1007c278c(0x1047b54)
Biome::getBiome(int)

0x1008533f4(0x10d3e2e)
Dimension::fetchEntity

0x1006e5a30(0xf0c114)
ContainerComponent::ContainerComponent(Entity&)

0x1006e5b28(0xf0c1ca)
ContainerComponent::rebuildContainer(ContainerType, int, int, bool)

0x100723268(0xfb1164)
FillingContainer::FillingContainer(Player*, int, int, ContainerType)

0x10060f710(0xe9feb0)
Container::getContainerType

0x100757488(0x102ea60)
ItemInstance::isNull

0x1006e3c50(0xf09c24)
BreathableComponent::getTotalAirSupply

0x1006add18(0xfac1ba)
SynchedEntityData::_get(short)

0x1006adc80(0xfac160)
SynchedEntityData::_find(short)

0x1006add80(0xfac1e8)
SynchedEntityData::getShort(short)

0x100679d28(0xf4f7b8)
EntityDefinitionDescriptor::executeTrigger(Entity&, DefinitionTrigger const&, VariantParameterList const&)

0x100679c40(0xf4f70a)
EntityDefinitionDescriptor::executeEvent(Entity&, std::string const&, VariantParameterList const&)

0x10064f944(0xf1da7c)
DefinitionTrigger::canTrigger(Entity const&, VariantParameterList const&) const

0x100679d80(0xf4f7e0)
EntityDefinitionDescriptor::forceExecuteTrigger(Entity&, DefinitionTrigger const&, VariantParameterList const&)

0x10060e680(0xe946d4)
VariantParameterList::hasParameter(std::string const&) const

0x10060e69c(0xe946e2)
VariantParameterList::getParameterType(std::string const&) const

0x10064dfb4(0xf1c6d0)
DefinitionEvent::evaluateGroups(Entity&, std::vector<DefinitionModifier, std::allocator<DefinitionModifier> >&, VariantParameterList const&)

0x1005a8444(0xe14da0)
ClassID::getNextID()

0x10067cb7c(0xf1cbbc)
DefinitionModifier::~DefinitionModifier()

0x1006e39e0(0xf098a0)
BossComponent::unRegisterPlayer

0x1006e38ac(0xf09710)
BossComponent::_sendBossEvent

0x10049f78c(0xcf4860)
NbtIo::write

0x1008d3db0(0x1166702)
MapItemSavedData::getMapId

0x1008e30f4(0x117d40a)
LevelData::setCommandsEnabled

0x1008e2efc(0x117d27c)
LevelData::setTime

0x1008e3060(0x117d396)
LevelData::getWorldCenter

0x100798f58(0x10c1810)
BlockPos::neighbor

0x100798f98(0x10c184)
BlockPos::center

0x100799098(0x10c18e0)
BlockSource::BlockSource(Level&, Dimension&, ChunkSource&, bool, bool)

0x10079c000(0x10c390e)
BlockSource::removeBlock

0x10079fe98(0x10c199c)
BlockSource::addListener

0x100009030(0x1691760)
Color::toARGB

0x1007a14b8(0x10d5bd8)
Explosion::Explosion(BlockSource&, Entity*, Vec3 const&, float)

0x1007a2308(0x10d69de)
Explosion::setFire

0x1007a2310(0x10d69e4)
Explosion::setBreaking

0x1007a2320(0x10d69ee)
Explosion::setMaxResistance

0x1007a2318(0x10d69ea)
Explosion::getToBlow

0x10070f1f8(0xf97730)
Player::isBouncing

0x1006a1df4(0xf7b8a0)
Mob::hasEffect

0x10064b1c4(0xed0864)
MobEffect::getId

0x10064d7fc(0xed3d1a)
MobEffectInstance::operator!=(MobEffectInstance const&) const

0x1007a9a8c(0x10dd0ac)
Level::hasLevelStorage

0x1007a9a9c(0x10dd0b6)
Level::getLevelStorage

0x1007a98a4(0x10dce8a)
Level::getSeed

0x1007a8f38(0x10dc5c8)
Level::removeListener

0x1007a8ec4(0x10dc516)
Level::addListener

0x1008533bc(0x10d3e08)
Dimension::getLevel()

0x100079afc(0x7a77b8)
MinecraftClient::getHoloInput

0x100079610(0x7a72ce)
MinecraftClient::getServer

0x100088068(0x7bae9c)
MinecraftClient::getSkinRepository

0x100078a60(0x7a6756)
MinecraftClient::getOptions

0x100082ad4(0x7b3578)
MinecraftClient::getCameraEntity

0x1000855c0(0x7b6af0)
MinecraftClient::getCameraTargetEntity

0x1000855c8(0x7b6af6)
MinecraftClient::setCameraTargetEntity

0x10007ae74(0x7a8a88)
MinecraftClient::getLocalPlayer

0x100085598(0x7b6ad8)
MinecraftClient::getTextures

0x10007b9a4(0x7a9320)
MinecraftClient::getHoloviewerScale

0x100083818(0x7b4a6c)
MinecraftClient::play

0x100083674(0x7b4950)
MinecraftClient::onAppResumed

0x100536c90(0xd8e580)
WorkerPool::getWorkersFor

0x100534e9c(0xd8cf78)
BackgroundWorker::resume

0x100044868(0x16b7070)
mce::TextureGroup::getLocationFor(DynamicTexture)

0x100044adc(0x16b73b4)
mce::TextureGroup::getTexturePair(ResourceLocation const&)

0x10003ce34(0x16b376c)
mce::RenderMaterial::initContext()

0x100034acc(0x16ac780)
mce::RenderContextImmediate::get()

0x100413ed8(0xc0f19c)
mce::RenderGraph::clearRenderGraph()

0x100413c24(0xc0efb8)
mce::RenderGraph::addRenderStage(EyeRenderingModeBit, std::unique_ptr<mce::RenderStage, std::default_delete<mce::RenderStage> >)

0x100034974(0x16ac686)
mce::RenderContext::clearContextState()

0x100034bac(0x16ac812)
mce::RenderDevice::getClosestSupportedSampleDescription(mce::TextureFormat, mce::SampleDescription const&) const

0x100418bac(0xc12b40)
mce::RenderStage::RenderStage()

0x100418cb4(0xc12be8)
mce::RenderStage::getEyeRenderingModeBits() const

0x100034660(0x16ac4d8)
mce::FrameBufferObject::FrameBufferObject()

0x1000346e0(0x16ac522)
mce::FrameBufferObject::createFrameBuffer(mce::RenderContext&, mce::FrameBufferDescription const&)

0x1000346e8(0x16ac52a)
mce::FrameBufferObject::createFrameBufferAttachment(mce::RenderContext&, mce::FrameBufferAttachmentDescription const&)

0x100034710(0x16ac542)
mce::FrameBufferObject::finalizeFrameBuffer()

0x100033ec4(0x16abf90)
mce::FrameBufferDescription::FrameBufferDescription()

0x100033e30(0x16abf10)
mce::FrameBufferAttachmentDescription::FrameBufferAttachmentDescription()

0x100033e64(0x16abf80)
mce::FrameBufferAttachmentDescription::setTextureFormatAndAttachmentType(mce::TextureFormat)

0x1004135a8(0xc0eac8)
mce::MultisampledRenderStageWithFrameBufferObject::MultisampledRenderStageWithFrameBufferObject()

0x100048140(0x16b9510)
mce::TexturePtr::TexturePtr()

0x100044594(0x16b6d50)
mce::TextureGroup::reloadAll()

0x10003c7d0(0x16b2f10)
mce::Mesh::isValid

0x10003c750(0x16b2eb4)
mce::Mesh::operator=(mce::Mesh&&)

0x10003c5f4(0x16b2d88)
mce::Mesh::Mesh(mce::Mesh&&)
0x10003c3dc(0x16b2c40)
mce::Mesh::Mesh(mce::VertexFormat const&, unsigned int, unsigned int, unsigned char, mce::PrimitiveMode, unsigned char*, bool)

0x10003c5ac(0x16b2d4c)
mce::Mesh::reset()

0x10003c6d4(0x16b2e64)
mce::Mesh::~Mesh()

0x10040dfcc(0xc08254)
TickingTextureStage::TickingTextureStage(MinecraftClient&)

0x1003e1344(0xbd7ccc)
GameRenderer::createRenderGraph()

0x1003defb0(0xbd52d8)
DefaultUIRendererCompositorStage::DefaultUIRendererCompositorStage(MinecraftClient&)

0x1003dee08(0xbd50dc)
DefaultGameRendererCompositorStage::DefaultGameRendererCompositorStage(MinecraftClient&)

0x10040b87c(0xc0577c)
MultisampledGameRenderStageWithFrameBufferObject::MultisampledGameRenderStageWithFrameBufferObject(MinecraftClient&)

0x1002d13fc(0xa5a874)
HolographicPlatform::getTransformTranslation(TransformSpace, TransformSpace, TransformSpace)

0x1002cece8(0xa59534)
HolographicPlatform::getTransform(TransformSpace, TransformSpace, TransformSpace)

0x1002ceeec(0xa595d0)
HolographicPlatform::_getTransform(TransformSpace, TransformSpace)

0x10041a6f0(0xc13fd0)
Tessellator::init

0x10041a8d0(0xc141b8)
Tessellator::isTessellating() const

0x10041b640(0xc14f14)
Tessellator::end(char const*, bool)

0x10041b36c(0xc14c10)
Tessellator::setOffset(float, float, float)

0x1003a5c9c(0xb8956e)
BlockTessellator::getTessellator()

0x10084598c(0x10ca9ae)
ChunkViewSource::clear()

0x100597ac8(0xe002e4)
OfferRepository::isGameLicensed

0x10037f5f8(0xb5abf0)
SkinRepository::getSelectedSkin

0x10037e904(0xb5a068)
SkinRepository::getDefaultSkin

0x10037e974(0xb5a144)
SkinRepository::_setDefaultSkin

0x10037f23c(0xb5a800)
SkinRepository::_getSkinId

0x10037ef68(0xb5a5a4)
SkinRepository::_getSkin

0x10037eaa8(0xb5a204)
SkinRepository::setSkin

0x10037f384(0xb5a90c)
SkinRepository::_doNameSwap

0x10035efc4(0xb03b98)
Skin::premiumLocked

0x10035ee60(0xb0397c)
Skin::getSerializable

0x10035ee80(0xb0398c)
Skin::isCustomSkin

0x10035ee58(0xb03978)
Skin::getName

0x10035f2d4(0xb03e60)
SkinPack::isPremiumUnlocked

0x10035f2b4(0xb03e50)
SkinPack::getSerializableName

0x10035f2ac(0xb03e4c)
SkinPack::getSkins

0x100591314(0xdfa6c4)
Offer::isOwned

0x10060cea4(0xe92598)
Util::splitString

0x100009900(0x1691e24)
Resource::loadTexture

0x10000a354(0x16923dc)
TextureData::~TextureData()

0x10000a3cc(0x1692418)
TextureData::getWidth

0x10000a3d4(0x169241c)
TextureData::getHeight

0x10000a398(0x16923f2)
TextureData::getDataModify

0x100340724(0xae5a9a)
Options::getUsername

0x10034071c(0xae5a92)
Options::setUsername

0x100340730(0xae5aa8)
Options::setSkinId

0x10033fc4c(0xae4638)
Options::save

0x100340844(0xae5d60)
Options::getSwapJumpAndSneak

0x10034083c(0xae5d54)
Options::getSplitControls

0x100340834(0xae5d48)
Options::getServerVisible

0x10033fa14(0xae4434)
Options::getBobView

0x1003406fc(0xae5a76)
Options::getCameraSpeed

0x10033f974(0xae427c)
Options::getDestroyVibration

0x10034060c(0xae594c)
Options::getDifficulty

0x10034085c(0xae5db4)
Options::getDpadScale

0x10034094c(0xae5f2e)
Options::getVRHeadSteering

0x10034059c(0xae57f6)
Options::getFancyGraphics

0x100340854(0xae5d78)
Options::getFancySkies

0x1003406b4(0xae59ea)
Options::getFieldOfView

0x1003406ec(0xae5a5e)
Options::getFixedCamera

0x1003406f4(0xae5a6a)
Options::getFlySpeed

0x1003405c4(0xae5900)
Options::getFullscreen

0x10033f994(0xae4382)
Options::getGameSensitivity

0x100340698(0xae59d0)
Options::getGamma

0x100340704(0xae5a82)
Options::getGuiScale

0x10034062c(0xae5964)
Options::getHideGui

0x10033f94c(0xae4260)
Options::getAutoJump

0x10033f944(0xae425a)
Options::getInvertYMouse

0x1003405f8(0xae563c)
Options::getLanguage

0x100340594(0xae57ea)
Options::getLimitFramerate

0x1003408f4(0xae5ed0)
Options::getLimitWorldSize

0x1003406bc(0xae5a20)
Options::getMSAA

0x100340904(0xae5ef0)
Options::getMultiPlayerGame

0x10033f97c(0xae429c)
Options::getMusic

0x10033f9f8(0xae441a)
Options::getParticleViewDistance

0x100340670(0xae599c)
Options::getPlayerViewPerspective

0x1003406dc(0xae5a52)
Options::getSmoothCamera

0x10033f984(0xae42a4)
Options::getSound

0x10034083c(0xae5d54)
Options::getSplitControls

0x10033fa3c(0xae4458)
Options::getStereoRendering

0x10034097c(0xae5f54)
Options::getStutterTurn

0x100340844(0xae5d60)
Options::getSwapJumpAndSneak

0x1003406cc(0xae5a3a)
Options::getTexelAA

0x1003405a4(0xae5802)
Options::getTransparentLeaves

0x1003405b4(0xae581a)
Options::getUseMouseForDigging

0x10034084c(0xae5d6c)
Options::getUseTouchScreen

0x10033f9d0(0xae43e6)
Options::getViewDistanceChunks

0x10033fb84(0xae457c)
Options::getVRLivingRoomCursorCentered

0x10033fb4c(0xae454a)
Options::getVRGazePitchBoost

0x10033fa5c(0xae4482)
Options::getVRHudAtTop

0x10033fb7c(0xae4570)
Options::getVRHudDrifts

0x10033fbcc(0xae45cc)
Options::getVRLinearJump

0x10033fc04(0xae45fe)
Options::getVRLinearMotion

0x100340574(0xae5790)
Options::getVRRollTurning

0x10034056c(0xae5784)
Options::getVRRollTurningSensitivity

0x10033fc3c(0xae462a)
Options::getVRStickyMining

0x1003409dc(0xae5fa0)
Options::getStutterConstantTimeMode

0x1003409ac(0xae5f7a)
Options::getStutterTurnSound

0x10034055c(0xae576c)
Options::getVRTapTurn

0x100340564(0xae5778)
Options::getVRTapTurningSensitivity

0x1003406c4(0xae5a26)
Options::getVRMSAA

0x100340914(0xae5efc)
Options::getXboxLiveVisible

0x1007aac68(0x10de290)
Level::getDifficulty

0x1007a7664(0x10db0e4)
Level::broadcastLevelEvent(LevelEvent, Vec3 const&, int, Player*)

0x100613490(0x1187798)
Minecraft::isModded

0x100613478(0x118778c)
Minecraft::getLevel

0x1006139b8
Minecraft::getNetworkHandler

0x100613294(0x118760c)
Minecraft::getServerNetworkHandler

0x1004a981c(0xced192)
NetworkHandler::getConnector

0x1004a952c(0xcecede)
NetworkHandler::isServer

0x10006364c(0xcd621c)
MinecraftEventing::fireEventPlayerMessage(std::string const&, std::string const&, std::string const&, std::string const&)

0x1000638ec(0xcd6658)
MinecraftEventing::fireEventPlayerMessageTell(std::string const&, std::string const&, std::string const&)

0x100063974(0xcd6744)
MinecraftEventing::fireEventPlayerMessageChat(std::string const&, std::string const&)

0x100058f88(0xcbd318)
MinecraftEventing::fireEventBlockBroken(Player*, FullBlock&)

0x100059284(0xcbdb6c)
MinecraftEventing::fireEventBlockPlaced(Player*, FullBlock const&)

0x100059580(0xcbdff8)
MinecraftEventing::fireEventCraftingSessionEnd(Player*)

0x10005987c(0xcbe538)
MinecraftEventing::fireEventCraftingSessionStart(Player*, unsigned int)

0x100059a64(0xcbee2c)
MinecraftEventing::fireEventEndOfDay(Player*, Level&)

0x100059d6c(0xcbf504)
MinecraftEventing::fireEventItemAcquired(Player*, ItemInstance const&, unsigned int, MinecraftEventing::AcquisitionMethod)

0x10005a05c(0xcbfb88)
MinecraftEventing::fireEventItemCrafted(Player*, ItemInstance const&)

0x10005a454(0xcc0a04)
MinecraftEventing::fireEventItemDropped(Player*, ItemInstance const&)

0x10005a6a0(0xcc0cdc)
MinecraftEventing::fireEventItemSmelted(Player*, ItemInstance const&, ItemInstance const&)

0x10005a990(0xcc1170)
MinecraftEventing::fireEventItemUsed(Player*, ItemInstance const&, MinecraftEventing::UseMethod)

0x10005ac80(0xcc1e90)
MinecraftEventing::fireEventMobKilled(Player*, Entity*, Mob&, unsigned int)

0x10005b384(0xcc2db8)
MinecraftEventing::fireEventBossKilled(Player*, int, long long, int)

0x10005b60c(0xcc3334)
MinecraftEventing::fireEventEntityInteracted(Player*, Entity&, MinecraftEventing::InteractionType)

0x10005b860(0xcc3620)
MinecraftEventing::fireEventPlayerTravelled(Player*, float)

0x10005bf14(0xcc488c)
MinecraftEventing::fireEventPlayerBounced(Player*, FullBlock const&, int)

0x10005c19c(0xcc4e00)
MinecraftEventing::fireEventPlayerDied(Player*, int, int)

0x10005c3d0(0xcc50c8)
MinecraftEventing::fireEventPortalBuilt(Player*, DimensionId)

0x10005c5c0(0xcc54bc)
MinecraftEventing::fireEventPortalUsed(Player*, DimensionId, DimensionId)

0x10005c808(0xcc5a18)
MinecraftEventing::fireEventPotionBrewed(Player*, ItemInstance const&, unsigned int)

0x10005caa0(0xcc5db8)
MinecraftEventing::fireEventCauldronUsed(Player*, short, unsigned int, short)

0x10005cde4(0xcc653c)
MinecraftEventing::fireEventConnectionFailed(MinecraftEventing::ConnectionFailureReason)

0x10005cf98(0xcc6724)
MinecraftEventing::fireEventSignInToXboxLive(std::string const&, bool, MinecraftEventing::SignInStage)

0x10005d1f8(0xcc6d1c)
MinecraftEventing::fireEventSignOutOfXboxLive()

0x10005d3a0(0xcc7204)
MinecraftEventing::fireEventVehicleExited(Player*, unsigned int, unsigned long long)

0x10005d628(0xcc759c)
MinecraftEventing::fireEventWorldGenerated(std::string const&, LevelSettings const&)

0x10005d908(0xcc7e98)
MinecraftEventing::fireEventWorldLoaded(Player*, Level&, ResourcePackManager&, ResourcePacksInfoData&)

0x10005dd20(0xcc861c)
MinecraftEventing::fireEventSetValidForAchievements(Player*, bool)

0x10005de28(0xcc8fc4)
MinecraftEventing::fireEventAwardAchievement(Player*, MinecraftEventing::AchievementIds)

0x10005e01c(0xcc91d8)
MinecraftEventing::fireEventMultiplayerRoundStart(Player*, Level&, std::string const&, int, std::string const&, int, Realms::World const&)

0x10005e7c8(0xcca86c)
MinecraftEventing::fireEventMultiplayerRoundEnd(Player*, int)

0x10005ef6c(0xccbac8)
MinecraftEventing::fireEventMultiplayerConnectionStateChanged(bool, std::string const&, std::string const&, unsigned int, unsigned int, unsigned int, std::string const&)

0x10005f308(0xccc268)
MinecraftEventing::fireEventStartWorld(std::string const&, std::string const&)

0x10005f558(0xccc61c)
MinecraftEventing::anonymizeIPAddress(std::string const&)

0x10005f6dc(0xccc88c)
MinecraftEventing::fireEventJoinCanceled(LoadingState)

0x10005f8cc(0xcccc44)
MinecraftEventing::fireEventStartClient()

0x10005faf8(0xcccfa0)
MinecraftEventing::fireEventAppPaused()

0x10005fc60(0xccd0bc)
MinecraftEventing::fireEventAppSuspended()

0x10005fdc8(0xccd1d8)
MinecraftEventing::fireEventAppResumed()

0x10005ff30(0xccd2f4)
MinecraftEventing::fireEventFocusGained()

0x100060098(0xccd410)
MinecraftEventing::fireEventFocusLost()

0x100060200(0xccd648)
MinecraftEventing::fireEventHardwareInfo()

0x100060774(0xcce304)
MinecraftEventing::fireEventGameSessionStart(Player*, MinecraftClient*, Level&, std::string const&)

0x100060f14(0xccf54c)
MinecraftEventing::fireEventGameSessionComplete(Player*, MinecraftClient*, Level&, unsigned long long)

0x1000613f4(0xccfd88)
MinecraftEventing::fireEventWorldFilesListed(unsigned long long, unsigned long long, unsigned long long, unsigned long long)

0x1000616cc(0xcd049c)
MinecraftEventing::fireEventPerformanceMetrics(ProfilerLiteTelemetry const&)

0x100061c10(0xcd0f80)
MinecraftEventing::fireEventOptionsUpdated(Options&)

0x100062f94(0xcd4578)
MinecraftEventing::fireEventScreenChanged(std::string const&, std::string const&, std::string const&)

0x1000631fc(0xcd4b8c)
MinecraftEventing::fireEventPlayerTransform(Player&)

0x100063594(0xcd6078)
MinecraftEventing::fireEventPlayerMessageSay(std::string const&, std::string const&)

0x100063a2c(0xcd75fc)
MinecraftEventing::fireEventStoreOfferPurchaseAttempt(std::string const&, std::string const&)

0x100063c70(0xcd7968)
MinecraftEventing::fireEventStoreOfferPurchaseResolved(std::string const&, std::string const&, bool)

0x100063efc(0xcd7dac)
MinecraftEventing::fireEventAdditionalContentLoaded(Player const*, ResourcePack const*, int, int)

0x10006429c(0xcd868c)
MinecraftEventing::fireEventRespondedToAcceptContent(ResourcePacksInfoData const&, bool)

0x100064710(0xcd8c24)
MinecraftEventing::fireEventFileTransmissionStarted(std::string const&, std::string const&)

0x100064954(0xcd8f90)
MinecraftEventing::fireEventFileTransmissionCancelled(std::string const&, std::string const&, float)

0x100064be0(0xcd93cc)
MinecraftEventing::fireEventFileTransmissionCompleted(std::string const&, std::string const&, unsigned long long, bool)

0x1004978b0(0xcda240)
I18n::loadLanguages(ResourcePackManager&)

0x100497dbc(0xcdab04)
I18n::_setLanguageSupportsHypenSplitting(Localization const&)

0x100497e64(0xcdac44)
I18n::chooseLanguage(std::string const&)

0x100497e80(0xcdac64)
I18n::getLocaleFor(std::string const&)

0x10006ba2c(0xdf7604)
Common::getGameVersionString()  //If you want to hook this function up and change the version display, I recommend you use "Common::getGameVersionStringNet"

0x10006bae0(0xdf77b0)
Common::getGameVersionStringNet()

0x10006bc94(0xdf7d50)
Common::getGameDevVersionString()

0x10084f3a8(0x10d0f14)
NetworkChunkSource::NetworkChunkSource(Level*, Dimension*)

0x1008e3070(0x117d3a0)
LevelData::getStorageVersion

0x100851844(0x10d24b4)
Dimension::Dimension(Level&, DimensionId, short)

0x100851be0(0x10d28fc)
Dimension::~Dimension()

0x1008533e4(0x10d3e26)
Dimension::getEntityIdMap

0x1008522d0(0x10d2e4c)
Dimension::_createGenerator

0x10085200c(0x10d2c8e)
Dimension::init

0x1008525f8(0x10d3016)
Dimension::tickRedstone

0x100854830(0x10d4fea)
Dimension::hasCeiling

0x100854838(0x10d4ff0)
Dimension::setCeiling

0x100852694(0x10d3070)
Dimension::getOldSkyDarken

0x10085295c(0x10d32d8)
Dimension::getSunAngle

0x1008529d4(0x10d33f4)
Dimension::getSunIntensity

0x100852aec(0x10d3536)
Dimension::getMoonPhase

0x100852b34(0x10d3560)
Dimension::getMoonBrightness

0x100852dec(0x10d380c)
Dimension::getSkyColor(Entity const&, float)
0x100852e68(0x10d384c)
Dimension::getSkyColor(BlockSource&, BlockPos const&, float)

0x1008533d4(0x10d3e1a)
Dimension::getBlockSourceDEPRECATEDUSEPLAYERREGIONINSTEAD

0x1008532c4(0x10d3d14)
Dimension::getStarBrightness

1008533b4(0x10d3e04)
Dimension::getId

0x10085558c(0x10d5a60)
NormalDimension::NormalDimension(Level&)

0x100855bdc(0x10d5668)
HellDimension::HellDimension(Level&)

0x1008ee58c(0x118b6e0)
CircuitSceneGraph::CircuitSceneGraph()

0x1008ee5e0(0x118b986)
CircuitSceneGraph::~CircuitSceneGraph()

0x1008f4ba8(0x118f824)
CircuitSystem::CircuitSystem()

0x1008f4c0c(0x118f856)
CircuitSystem::evaluate

0x1007ba1f4(0x1167e20)
Seasons::Seasons(Dimension&)

0x1007ba1fc(0x1167e24)
Seasons::~Seasons()

0x1007ba200(0x1167e28)
Seasons::tick

0x1007bd3a0(0x1184cc8)
Weather::Weather(Dimension&)

0x1007bd57c(0x1184e24)
Weather::tick

0x1007bd6dc(0x1184f58)
Weather::serverTick

0x1007bdab8(0x11852a4)
Weather::isRaining

0x1007bda88(0x1185266)
Weather::getRainLevel

0x1007bda98(0x1185284)
Weather::getFogLevel

0x1007bdaa0(0x1185288)
Weather::setFogLevel

0x1007bda78(0x1185248)
Weather::getLightningLevel

0x1007bdc2c(0x1185378)
Weather::getSkyFlashTime

0x1007bdc34(0x118537c)
Weather::setSkyFlashTime

0x1007bdc3c(0x1185380)
Weather::stop

0x1008e2fb8(0x117d318)
LevelData::getRainLevel

0x1008e2fc0(0x117d31e)
LevelData::setRainLevel

0x1008e2f88(0x117d2ee)
LevelData::getLightningLevel

0x1008e2f90(0x117d2ee)
LevelData::setLightningLevel

0x1008e2f98(0x117d2f4)
LevelData::getLightningTime

0x1008e2fa0(0x117d2fa)
LevelData::setLightningTime

0x1008e2fc8(0x117d324)
LevelData::getRainTime

0x1008e2fd0(0x117d32a)
LevelData::setRainTime

0x1008e2fa8
LevelData::isRaining

0x10070e194(0xf966b0)
Player::getDimension

0x1008be0b8(0x11477b0)
PerlinSimplexNoise::PerlinSimplexNoise(unsigned int, int)

0x1008be208
PerlinSimplexNoise::_init(Random&)

0x1008e4784(0x118455c)
Storage::set(std::string const&, SavedData*)

0x1008e45ec(0x118433c)
SavedDataStorage::load(SavedData*, std::string const&)

0x1004afd00(0xcf4934)
NbtIo::read

0x10049f3c4(0xce2870)
Tag::readNamedTag

0x10049f538(0xce2a38)
Tag::newTag

0x100057aa0(0x793408)
AppPlatformListener::AppPlatformListener()

0x10052b5a8(0xd82f30)
AppPlatform::singleton

0x10052ce80(0xd84958)
AppPlatform::addListener

0x100406e50(0xc02d18)
LevelRenderer::getFov(float, bool)

0x100406f90(0xc02ec8)
LevelRenderer::bobHurt(Matrix&, float)

0x1003fa11c(0xbf4990)
LevelRenderer::tickRain()

0x1003fa818(0xbf511c)
LevelRenderer::_finishBuildingChunk(RenderChunk&)

0x1003fa934(0xbf51f6)
LevelRenderer::_updateColumnVisibility(BlockPos const&)

0x1003b2a1c(0xb97d14)
RenderChunk::isReady

0x1003b1fb0(0xb96d5a)
RenderChunk::isEmpty

0x1003b1c98(0xb96af4)
RenderChunk::endRebuild(Vec3 const&)

0x1003b1fdc(0xb96d74)
RenderChunk::updateFaceSortState(BlockPos)

0x1003b2cb0(0xb98178)
RenderChunk::getPosition() const

0x1003b37f8(0xb98518)
RenderChunkBuilder::trim()

0x10040f6d4(0xc0a41c)
WeatherRenderer::tick

0x10040fc24(0xc0aa34)
WeatherRenderer::updatePrecipitation

0x1007c28f0(0x1047cce)
Biome::getDownfall

0x1008be44c(0x1147998)
PerlinSimplexNoise::getValue(float, float) const

0x1008be9b4(0x1147dbc)
SimplexNoise::_getValue(Vec2 const&) const

0x1006a0fa8(0xf7ab54)
Mob::getHealth

0x100615df8(0xe966be)
AttributeInstance::getCurrentValue

0x10079a5d4(0x10c26c0)
BlockSource::getLightColor

0x100411790(0xc0c640)
LightTexture::getColorForUV(BrightnessPair)

0x100047de4(0x16b9428)
TexturePair::sync

0x1007a7bec(0x10db444)
Level::addParticle
